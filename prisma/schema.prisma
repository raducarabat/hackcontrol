// -----------------------------------
// Initial config:
// -----------------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  ORGANIZER
  USER
}

enum crdb_internal_region {
  aws_eu_central_1 @map("aws-eu-central-1")
}

model Widget {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
}

// -----------------------------------
// Tables:
// -----------------------------------

model Hackathon {
  id             String          @id @default(cuid())
  name           String
  url            String          @unique
  description    String?
  rules          String?
  criteria       String?
  owner          User?           @relation(fields: [creatorId], references: [id])
  creatorId      String
  updatedAt      DateTime        @default(now()) @updatedAt
  is_finished    Boolean         @default(false)
  verified       Boolean         @default(false)
  participations Participation[]
  announcements  Announcement[]
  Judge          Judge[]

  @@unique([url, creatorId])
  @@map(name: "hackathons")
}

model Participation {
  id             String     @id @default(cuid())
  is_reviewed    Boolean    @default(false)
  is_winner      Boolean    @default(false)
  title          String
  description    String
  project_url    String
  hackathon_name String
  hackathon_url  String
  createdBy      User?      @relation(fields: [creatorId], references: [id])
  creatorId      String
  creatorName    String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  hackathon      Hackathon? @relation(fields: [hackathon_url], references: [url], onDelete: Cascade)

  @@unique([creatorId, hackathon_url])
  @@map(name: "participations")
}

model Announcement {
  id          String    @id @default(cuid())
  title       String
  content     String
  important   Boolean   @default(false)
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  hackathonId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map(name: "announcements")
}

// -----------------------------------
// User:
// -----------------------------------

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id               String          @id @default(cuid())
  name             String?
  username         String?         @unique
  email            String?         @unique
  emailVerified    DateTime?
  image            String?
  role             Role            @default(USER)
  access           Boolean         @default(true)
  accounts         Account[]
  sessions         Session[]
  hackathons       Hackathon[]
  participations   Participation[]
  judgedHackathons Judge[]
  invitedJudges    Judge[]         @relation("JudgeInviter")

  @@map(name: "users")
}

model Judge {
  id          String   @id @default(cuid())
  userId      String
  hackathonId String
  invitedBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  hackathon Hackathon @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  inviter   User      @relation("JudgeInviter", fields: [invitedBy], references: [id])

  @@unique([userId, hackathonId])
  @@map(name: "judges")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}
